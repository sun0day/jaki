import{_ as e,c as a,o as t,a1 as o}from"./chunks/framework.B4IhSLAB.js";const f=JSON.parse('{"title":"What is js-ast-ql ?","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md"}'),s={name:"guide/introduction.md"},i=o('<h1 id="what-is-js-ast-ql" tabindex="-1">What is <code>js-ast-ql</code> ? <a class="header-anchor" href="#what-is-js-ast-ql" aria-label="Permalink to &quot;What is `js-ast-ql` ?&quot;">â€‹</a></h1><p><code>js-ast-ql</code> is a library that aims to help developers efficiently query Javascript ast and manipulate source code.</p><h2 id="design-pattern" tabindex="-1">Design Pattern <a class="header-anchor" href="#design-pattern" aria-label="Permalink to &quot;Design Pattern&quot;">â€‹</a></h2><p><code>js-ast-ql</code> follows the functional programming paradigm(pattern matching, pure function, immutable data, etc...) which makes it pretty easy to use.</p><h2 id="code-parsing" tabindex="-1">Code Parsing <a class="header-anchor" href="#code-parsing" aria-label="Permalink to &quot;Code Parsing&quot;">â€‹</a></h2><p>Ideally, <code>js-ast-ql</code> is suitable for all <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">ESTree-compatible</a> asts. There is no restriction on the parser as long as it generates the <code>ESTree-compatible</code> ast. <code>js-ast-ql</code> recommends to use <a href="https://github.com/acornjs/acorn" target="_blank" rel="noreferrer">acorn</a> since it&#39;s tiny and fast.</p><h2 id="built-in-ast-graph" tabindex="-1">Built-in Ast Graph <a class="header-anchor" href="#built-in-ast-graph" aria-label="Permalink to &quot;Built-in Ast Graph&quot;">â€‹</a></h2><h2 id="high-performance" tabindex="-1">High Performance <a class="header-anchor" href="#high-performance" aria-label="Permalink to &quot;High Performance&quot;">â€‹</a></h2><p>Parallelizing fast ast parsing and fast file reading makes it possible to parse and query tons of Javascript files in seconds. See <a href="./.html">benchmark</a> for more details.</p><h2 id="type-safe" tabindex="-1">Type Safe <a class="header-anchor" href="#type-safe" aria-label="Permalink to &quot;Type Safe&quot;">â€‹</a></h2><p><code>js-ast-ql</code> does a lot work on making APIs more intuitive and safer. It&#39;s very friendly to intelligent type inference.</p><h2 id="highly-composable" tabindex="-1">Highly composable <a class="header-anchor" href="#highly-composable" aria-label="Permalink to &quot;Highly composable&quot;">â€‹</a></h2><p><code>js-ast-ql</code> cares about your disk spaces. It&#39;s divided into multiple isolated sub-packages. Install them when you need them.</p><table tabindex="0"><thead><tr><th>package</th><th>version</th><th>description</th></tr></thead><tbody><tr><td><code>js-ast-ql</code></td><td></td><td></td></tr></tbody></table><h2 id="code-shift-advanced-add-ons" tabindex="-1">Code Shift &amp; Advanced Add-ons <a class="header-anchor" href="#code-shift-advanced-add-ons" aria-label="Permalink to &quot;Code Shift &amp; Advanced Add-ons&quot;">â€‹</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently, <code>js-ast-ql</code> focuses on implementing ast query APIs, code shift and other advanced APIs will be added soon ðŸš€.</p></div>',16),r=[i];function n(d,l,c,h,p,u){return t(),a("div",null,r)}const b=e(s,[["render",n]]);export{f as __pageData,b as default};
