import{_ as s,c as i,o as a,a1 as e}from"./chunks/framework.BYLGBg7H.js";const E=JSON.parse('{"title":"What is jaki ?","description":"","frontmatter":{},"headers":[],"relativePath":"guide/introduction.md","filePath":"guide/introduction.md"}'),t={name:"guide/introduction.md"},n=e(`<h1 id="what-is-jaki" tabindex="-1">What is <code>jaki</code> ? <a class="header-anchor" href="#what-is-jaki" aria-label="Permalink to &quot;What is \`jaki\` ?&quot;">​</a></h1><p><code>jaki</code> is a library designed to help developers analyze and manipulate source code by querying Javascript or Typescript ast efficiently.</p><h2 id="estree-parsing" tabindex="-1">ESTree Parsing <a class="header-anchor" href="#estree-parsing" aria-label="Permalink to &quot;ESTree Parsing&quot;">​</a></h2><p>Ideally, <code>jaki</code> is suitable for all <a href="https://github.com/estree/estree" target="_blank" rel="noreferrer">ESTree-compatible</a> asts. There is no restriction on the parser as long as it generates the <code>ESTree-compatible</code> ast. Even so, there are still some differences between <code>ESTree</code>s parsed by different parsers. <code>jaki</code> are mainly tested on <a href="https://github.com/eslint/espree" target="_blank" rel="noreferrer">Espree</a> and <a href="https://www.npmjs.com/package/@typescript-eslint/parser" target="_blank" rel="noreferrer">@typescript-eslint/parser</a> for now and will be compatible with more parsers that can generate <code>ESTree-compatible</code> asts in the future.</p><p>All APIs&#39; inputs and outputs are designed around <code>ESTree</code>. You can find <code>ESTree</code> type definitions <a href="https://www.npmjs.com/package/@typescript-eslint/types?activeTab=code" target="_blank" rel="noreferrer">here</a>.</p><h2 id="ast-matching" tabindex="-1">Ast Matching <a class="header-anchor" href="#ast-matching" aria-label="Permalink to &quot;Ast Matching&quot;">​</a></h2><p><code>jaki</code> uses <a href="https://stackoverflow.com/questions/2502354/what-is-pattern-matching-in-functional-languages" target="_blank" rel="noreferrer">pattern matching</a> to query ast nodes, which makes it pretty easy to use. It extends <a href="https://github.com/gvergnaud/ts-pattern" target="_blank" rel="noreferrer">ts-pattern</a> to <a href="./.html">JP</a>, and provides two ways(<strong>JSON matching</strong> and <strong>grammar matching</strong>) to match ast nodes.</p><p>Let&#39;s say we want to search <code>VariableDeclaration</code> of <code>let foo = any_value;</code>. Compared with the traditional visitor pattern, the <code>jaki</code> method would be like:</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// visitor pattern</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;espree&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> walk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;acorn-walk&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espree.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">walk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  VariableDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node.kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;let&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         node.declarations.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           node.declarations[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].id.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(node)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jaki JSON matching</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;espree&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { find, JP } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;jaki&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ast</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> espree.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ast,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  JP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VariableDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kind: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;let&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    declarations: [ { id: { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;foo&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } } ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jaki grammar matching</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ast, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VariableDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`let foo = $(*);\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h2 id="built-in-ast-graph" tabindex="-1">Built-in Ast Graph <a class="header-anchor" href="#built-in-ast-graph" aria-label="Permalink to &quot;Built-in Ast Graph&quot;">​</a></h2><p>In order to find target ast nodes based on other nodes more quickly, <code>jaki</code> internally maintains a <code>AstGraph</code> data structure which describes relationships(scope, reference, etc...) between ast nodes. <code>AstGraph</code> is progressively built by calling query APIs. In other words, <code>AstGraph</code>&#39;s size depends on the ast nodes you visited. <code>AstGraph</code> reuses the visited ast nodes and stores their relationships in several <code>WeakMap</code>s, so you don&#39;t have to worry about its memory usage.</p><h2 id="high-performance" tabindex="-1">High Performance <a class="header-anchor" href="#high-performance" aria-label="Permalink to &quot;High Performance&quot;">​</a></h2><p>Parallelizing fast ast parsing and fast file reading makes it possible to parse and query tons of Javascript files in seconds. See <a href="./.html">benchmark</a> for more details.</p><h2 id="type-safe" tabindex="-1">Type Safe <a class="header-anchor" href="#type-safe" aria-label="Permalink to &quot;Type Safe&quot;">​</a></h2><p><code>jaki</code> does a lot work on making APIs more intuitive and safer. It&#39;s very friendly to intelligent type inference.</p><h2 id="highly-composable" tabindex="-1">Highly composable <a class="header-anchor" href="#highly-composable" aria-label="Permalink to &quot;Highly composable&quot;">​</a></h2><p><code>jaki</code> cares about your disk spaces. It&#39;s divided into multiple isolated sub-packages. Install them when you need them.</p><table tabindex="0"><thead><tr><th>package</th><th>version</th><th>description</th></tr></thead><tbody><tr><td><code>jaki</code></td><td></td><td></td></tr></tbody></table><h2 id="code-shift-advanced-add-ons" tabindex="-1">Code Shift &amp; Advanced Add-ons <a class="header-anchor" href="#code-shift-advanced-add-ons" aria-label="Permalink to &quot;Code Shift &amp; Advanced Add-ons&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Currently, <code>jaki</code> focuses on implementing ast query APIs, code shift and other advanced APIs will be added soon 🚀.</p></div>`,21),h=[n];function l(p,r,k,d,o,c){return a(),i("div",null,h)}const y=s(t,[["render",l]]);export{E as __pageData,y as default};
